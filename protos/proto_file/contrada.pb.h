// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contrada.proto

#ifndef PROTOBUF_contrada_2eproto__INCLUDED
#define PROTOBUF_contrada_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_contrada_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPContradaImpl();
void InitDefaultsPContrada();
void InitDefaultsPContradasImpl();
void InitDefaultsPContradas();
inline void InitDefaults() {
  InitDefaultsPContrada();
  InitDefaultsPContradas();
}
}  // namespace protobuf_contrada_2eproto
namespace tdpalio {
class PContrada;
class PContradaDefaultTypeInternal;
extern PContradaDefaultTypeInternal _PContrada_default_instance_;
class PContradas;
class PContradasDefaultTypeInternal;
extern PContradasDefaultTypeInternal _PContradas_default_instance_;
}  // namespace tdpalio
namespace tdpalio {

// ===================================================================

class PContrada : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdpalio.PContrada) */ {
 public:
  PContrada();
  virtual ~PContrada();

  PContrada(const PContrada& from);

  inline PContrada& operator=(const PContrada& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PContrada(PContrada&& from) noexcept
    : PContrada() {
    *this = ::std::move(from);
  }

  inline PContrada& operator=(PContrada&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PContrada& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PContrada* internal_default_instance() {
    return reinterpret_cast<const PContrada*>(
               &_PContrada_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PContrada* other);
  friend void swap(PContrada& a, PContrada& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PContrada* New() const PROTOBUF_FINAL { return New(NULL); }

  PContrada* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PContrada& from);
  void MergeFrom(const PContrada& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PContrada* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 status = 4;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status(int index) const;
  void set_status(int index, ::google::protobuf::int32 value);
  void add_status(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_status();

  // repeated int32 vittorie = 5;
  int vittorie_size() const;
  void clear_vittorie();
  static const int kVittorieFieldNumber = 5;
  ::google::protobuf::int32 vittorie(int index) const;
  void set_vittorie(int index, ::google::protobuf::int32 value);
  void add_vittorie(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vittorie() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vittorie();

  // repeated int32 feelings = 8;
  int feelings_size() const;
  void clear_feelings();
  static const int kFeelingsFieldNumber = 8;
  ::google::protobuf::int32 feelings(int index) const;
  void set_feelings(int index, ::google::protobuf::int32 value);
  void add_feelings(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      feelings() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_feelings();

  // string nome = 1;
  void clear_nome();
  static const int kNomeFieldNumber = 1;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // string nome_completo = 2;
  void clear_nome_completo();
  static const int kNomeCompletoFieldNumber = 2;
  const ::std::string& nome_completo() const;
  void set_nome_completo(const ::std::string& value);
  #if LANG_CXX11
  void set_nome_completo(::std::string&& value);
  #endif
  void set_nome_completo(const char* value);
  void set_nome_completo(const char* value, size_t size);
  ::std::string* mutable_nome_completo();
  ::std::string* release_nome_completo();
  void set_allocated_nome_completo(::std::string* nome_completo);

  // int32 indice = 3;
  void clear_indice();
  static const int kIndiceFieldNumber = 3;
  ::google::protobuf::int32 indice() const;
  void set_indice(::google::protobuf::int32 value);

  // int32 giocatore = 6;
  void clear_giocatore();
  static const int kGiocatoreFieldNumber = 6;
  ::google::protobuf::int32 giocatore() const;
  void set_giocatore(::google::protobuf::int32 value);

  // int32 fantino = 7;
  void clear_fantino();
  static const int kFantinoFieldNumber = 7;
  ::google::protobuf::int32 fantino() const;
  void set_fantino(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tdpalio.PContrada)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > status_;
  mutable int _status_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vittorie_;
  mutable int _vittorie_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > feelings_;
  mutable int _feelings_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::internal::ArenaStringPtr nome_completo_;
  ::google::protobuf::int32 indice_;
  ::google::protobuf::int32 giocatore_;
  ::google::protobuf::int32 fantino_;
  mutable int _cached_size_;
  friend struct ::protobuf_contrada_2eproto::TableStruct;
  friend void ::protobuf_contrada_2eproto::InitDefaultsPContradaImpl();
};
// -------------------------------------------------------------------

class PContradas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdpalio.PContradas) */ {
 public:
  PContradas();
  virtual ~PContradas();

  PContradas(const PContradas& from);

  inline PContradas& operator=(const PContradas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PContradas(PContradas&& from) noexcept
    : PContradas() {
    *this = ::std::move(from);
  }

  inline PContradas& operator=(PContradas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PContradas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PContradas* internal_default_instance() {
    return reinterpret_cast<const PContradas*>(
               &_PContradas_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PContradas* other);
  friend void swap(PContradas& a, PContradas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PContradas* New() const PROTOBUF_FINAL { return New(NULL); }

  PContradas* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PContradas& from);
  void MergeFrom(const PContradas& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PContradas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tdpalio.PContrada contrade = 1;
  int contrade_size() const;
  void clear_contrade();
  static const int kContradeFieldNumber = 1;
  const ::tdpalio::PContrada& contrade(int index) const;
  ::tdpalio::PContrada* mutable_contrade(int index);
  ::tdpalio::PContrada* add_contrade();
  ::google::protobuf::RepeatedPtrField< ::tdpalio::PContrada >*
      mutable_contrade();
  const ::google::protobuf::RepeatedPtrField< ::tdpalio::PContrada >&
      contrade() const;

  // @@protoc_insertion_point(class_scope:tdpalio.PContradas)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tdpalio::PContrada > contrade_;
  mutable int _cached_size_;
  friend struct ::protobuf_contrada_2eproto::TableStruct;
  friend void ::protobuf_contrada_2eproto::InitDefaultsPContradasImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PContrada

// string nome = 1;
inline void PContrada::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PContrada::nome() const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.nome)
  return nome_.GetNoArena();
}
inline void PContrada::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.nome)
}
#if LANG_CXX11
inline void PContrada::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdpalio.PContrada.nome)
}
#endif
inline void PContrada::set_nome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdpalio.PContrada.nome)
}
inline void PContrada::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdpalio.PContrada.nome)
}
inline ::std::string* PContrada::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:tdpalio.PContrada.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PContrada::release_nome() {
  // @@protoc_insertion_point(field_release:tdpalio.PContrada.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PContrada::set_allocated_nome(::std::string* nome) {
  if (nome != NULL) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:tdpalio.PContrada.nome)
}

// string nome_completo = 2;
inline void PContrada::clear_nome_completo() {
  nome_completo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PContrada::nome_completo() const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.nome_completo)
  return nome_completo_.GetNoArena();
}
inline void PContrada::set_nome_completo(const ::std::string& value) {
  
  nome_completo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.nome_completo)
}
#if LANG_CXX11
inline void PContrada::set_nome_completo(::std::string&& value) {
  
  nome_completo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdpalio.PContrada.nome_completo)
}
#endif
inline void PContrada::set_nome_completo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_completo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdpalio.PContrada.nome_completo)
}
inline void PContrada::set_nome_completo(const char* value, size_t size) {
  
  nome_completo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdpalio.PContrada.nome_completo)
}
inline ::std::string* PContrada::mutable_nome_completo() {
  
  // @@protoc_insertion_point(field_mutable:tdpalio.PContrada.nome_completo)
  return nome_completo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PContrada::release_nome_completo() {
  // @@protoc_insertion_point(field_release:tdpalio.PContrada.nome_completo)
  
  return nome_completo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PContrada::set_allocated_nome_completo(::std::string* nome_completo) {
  if (nome_completo != NULL) {
    
  } else {
    
  }
  nome_completo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome_completo);
  // @@protoc_insertion_point(field_set_allocated:tdpalio.PContrada.nome_completo)
}

// int32 indice = 3;
inline void PContrada::clear_indice() {
  indice_ = 0;
}
inline ::google::protobuf::int32 PContrada::indice() const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.indice)
  return indice_;
}
inline void PContrada::set_indice(::google::protobuf::int32 value) {
  
  indice_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.indice)
}

// repeated int32 status = 4;
inline int PContrada::status_size() const {
  return status_.size();
}
inline void PContrada::clear_status() {
  status_.Clear();
}
inline ::google::protobuf::int32 PContrada::status(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.status)
  return status_.Get(index);
}
inline void PContrada::set_status(int index, ::google::protobuf::int32 value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.status)
}
inline void PContrada::add_status(::google::protobuf::int32 value) {
  status_.Add(value);
  // @@protoc_insertion_point(field_add:tdpalio.PContrada.status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PContrada::status() const {
  // @@protoc_insertion_point(field_list:tdpalio.PContrada.status)
  return status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PContrada::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.PContrada.status)
  return &status_;
}

// repeated int32 vittorie = 5;
inline int PContrada::vittorie_size() const {
  return vittorie_.size();
}
inline void PContrada::clear_vittorie() {
  vittorie_.Clear();
}
inline ::google::protobuf::int32 PContrada::vittorie(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.vittorie)
  return vittorie_.Get(index);
}
inline void PContrada::set_vittorie(int index, ::google::protobuf::int32 value) {
  vittorie_.Set(index, value);
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.vittorie)
}
inline void PContrada::add_vittorie(::google::protobuf::int32 value) {
  vittorie_.Add(value);
  // @@protoc_insertion_point(field_add:tdpalio.PContrada.vittorie)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PContrada::vittorie() const {
  // @@protoc_insertion_point(field_list:tdpalio.PContrada.vittorie)
  return vittorie_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PContrada::mutable_vittorie() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.PContrada.vittorie)
  return &vittorie_;
}

// int32 giocatore = 6;
inline void PContrada::clear_giocatore() {
  giocatore_ = 0;
}
inline ::google::protobuf::int32 PContrada::giocatore() const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.giocatore)
  return giocatore_;
}
inline void PContrada::set_giocatore(::google::protobuf::int32 value) {
  
  giocatore_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.giocatore)
}

// int32 fantino = 7;
inline void PContrada::clear_fantino() {
  fantino_ = 0;
}
inline ::google::protobuf::int32 PContrada::fantino() const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.fantino)
  return fantino_;
}
inline void PContrada::set_fantino(::google::protobuf::int32 value) {
  
  fantino_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.fantino)
}

// repeated int32 feelings = 8;
inline int PContrada::feelings_size() const {
  return feelings_.size();
}
inline void PContrada::clear_feelings() {
  feelings_.Clear();
}
inline ::google::protobuf::int32 PContrada::feelings(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.PContrada.feelings)
  return feelings_.Get(index);
}
inline void PContrada::set_feelings(int index, ::google::protobuf::int32 value) {
  feelings_.Set(index, value);
  // @@protoc_insertion_point(field_set:tdpalio.PContrada.feelings)
}
inline void PContrada::add_feelings(::google::protobuf::int32 value) {
  feelings_.Add(value);
  // @@protoc_insertion_point(field_add:tdpalio.PContrada.feelings)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PContrada::feelings() const {
  // @@protoc_insertion_point(field_list:tdpalio.PContrada.feelings)
  return feelings_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PContrada::mutable_feelings() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.PContrada.feelings)
  return &feelings_;
}

// -------------------------------------------------------------------

// PContradas

// repeated .tdpalio.PContrada contrade = 1;
inline int PContradas::contrade_size() const {
  return contrade_.size();
}
inline void PContradas::clear_contrade() {
  contrade_.Clear();
}
inline const ::tdpalio::PContrada& PContradas::contrade(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.PContradas.contrade)
  return contrade_.Get(index);
}
inline ::tdpalio::PContrada* PContradas::mutable_contrade(int index) {
  // @@protoc_insertion_point(field_mutable:tdpalio.PContradas.contrade)
  return contrade_.Mutable(index);
}
inline ::tdpalio::PContrada* PContradas::add_contrade() {
  // @@protoc_insertion_point(field_add:tdpalio.PContradas.contrade)
  return contrade_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tdpalio::PContrada >*
PContradas::mutable_contrade() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.PContradas.contrade)
  return &contrade_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tdpalio::PContrada >&
PContradas::contrade() const {
  // @@protoc_insertion_point(field_list:tdpalio.PContradas.contrade)
  return contrade_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tdpalio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contrada_2eproto__INCLUDED
