// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jockeys.proto

#ifndef PROTOBUF_jockeys_2eproto__INCLUDED
#define PROTOBUF_jockeys_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_jockeys_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsOfferImpl();
void InitDefaultsOffer();
void InitDefaultsJockeyImpl();
void InitDefaultsJockey();
void InitDefaultsJockeysImpl();
void InitDefaultsJockeys();
inline void InitDefaults() {
  InitDefaultsOffer();
  InitDefaultsJockey();
  InitDefaultsJockeys();
}
}  // namespace protobuf_jockeys_2eproto
namespace tdpalio {
class Jockey;
class JockeyDefaultTypeInternal;
extern JockeyDefaultTypeInternal _Jockey_default_instance_;
class Jockeys;
class JockeysDefaultTypeInternal;
extern JockeysDefaultTypeInternal _Jockeys_default_instance_;
class Offer;
class OfferDefaultTypeInternal;
extern OfferDefaultTypeInternal _Offer_default_instance_;
}  // namespace tdpalio
namespace tdpalio {

// ===================================================================

class Offer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdpalio.Offer) */ {
 public:
  Offer();
  virtual ~Offer();

  Offer(const Offer& from);

  inline Offer& operator=(const Offer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Offer(Offer&& from) noexcept
    : Offer() {
    *this = ::std::move(from);
  }

  inline Offer& operator=(Offer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Offer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Offer* internal_default_instance() {
    return reinterpret_cast<const Offer*>(
               &_Offer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Offer* other);
  friend void swap(Offer& a, Offer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Offer* New() const PROTOBUF_FINAL { return New(NULL); }

  Offer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Offer& from);
  void MergeFrom(const Offer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Offer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 da_chi = 1;
  void clear_da_chi();
  static const int kDaChiFieldNumber = 1;
  ::google::protobuf::int32 da_chi() const;
  void set_da_chi(::google::protobuf::int32 value);

  // int32 contro_chi = 2;
  void clear_contro_chi();
  static const int kControChiFieldNumber = 2;
  ::google::protobuf::int32 contro_chi() const;
  void set_contro_chi(::google::protobuf::int32 value);

  // int32 a_vincere = 3;
  void clear_a_vincere();
  static const int kAVincereFieldNumber = 3;
  ::google::protobuf::int32 a_vincere() const;
  void set_a_vincere(::google::protobuf::int32 value);

  // int32 a_perdere = 4;
  void clear_a_perdere();
  static const int kAPerdereFieldNumber = 4;
  ::google::protobuf::int32 a_perdere() const;
  void set_a_perdere(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tdpalio.Offer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 da_chi_;
  ::google::protobuf::int32 contro_chi_;
  ::google::protobuf::int32 a_vincere_;
  ::google::protobuf::int32 a_perdere_;
  mutable int _cached_size_;
  friend struct ::protobuf_jockeys_2eproto::TableStruct;
  friend void ::protobuf_jockeys_2eproto::InitDefaultsOfferImpl();
};
// -------------------------------------------------------------------

class Jockey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdpalio.Jockey) */ {
 public:
  Jockey();
  virtual ~Jockey();

  Jockey(const Jockey& from);

  inline Jockey& operator=(const Jockey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jockey(Jockey&& from) noexcept
    : Jockey() {
    *this = ::std::move(from);
  }

  inline Jockey& operator=(Jockey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jockey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jockey* internal_default_instance() {
    return reinterpret_cast<const Jockey*>(
               &_Jockey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Jockey* other);
  friend void swap(Jockey& a, Jockey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jockey* New() const PROTOBUF_FINAL { return New(NULL); }

  Jockey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Jockey& from);
  void MergeFrom(const Jockey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Jockey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 capacita = 4;
  int capacita_size() const;
  void clear_capacita();
  static const int kCapacitaFieldNumber = 4;
  ::google::protobuf::uint32 capacita(int index) const;
  void set_capacita(int index, ::google::protobuf::uint32 value);
  void add_capacita(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      capacita() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_capacita();

  // repeated uint32 score = 5;
  int score_size() const;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  ::google::protobuf::uint32 score(int index) const;
  void set_score(int index, ::google::protobuf::uint32 value);
  void add_score(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      score() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_score();

  // repeated uint32 feelingContrade = 6;
  int feelingcontrade_size() const;
  void clear_feelingcontrade();
  static const int kFeelingContradeFieldNumber = 6;
  ::google::protobuf::uint32 feelingcontrade(int index) const;
  void set_feelingcontrade(int index, ::google::protobuf::uint32 value);
  void add_feelingcontrade(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      feelingcontrade() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_feelingcontrade();

  // repeated .tdpalio.Offer offerte = 9;
  int offerte_size() const;
  void clear_offerte();
  static const int kOfferteFieldNumber = 9;
  const ::tdpalio::Offer& offerte(int index) const;
  ::tdpalio::Offer* mutable_offerte(int index);
  ::tdpalio::Offer* add_offerte();
  ::google::protobuf::RepeatedPtrField< ::tdpalio::Offer >*
      mutable_offerte();
  const ::google::protobuf::RepeatedPtrField< ::tdpalio::Offer >&
      offerte() const;

  // string nome = 3;
  void clear_nome();
  static const int kNomeFieldNumber = 3;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // uint32 indice = 1;
  void clear_indice();
  static const int kIndiceFieldNumber = 1;
  ::google::protobuf::uint32 indice() const;
  void set_indice(::google::protobuf::uint32 value);

  // uint32 eta = 2;
  void clear_eta();
  static const int kEtaFieldNumber = 2;
  ::google::protobuf::uint32 eta() const;
  void set_eta(::google::protobuf::uint32 value);

  // int32 contrada = 7;
  void clear_contrada();
  static const int kContradaFieldNumber = 7;
  ::google::protobuf::int32 contrada() const;
  void set_contrada(::google::protobuf::int32 value);

  // int32 infortunio = 8;
  void clear_infortunio();
  static const int kInfortunioFieldNumber = 8;
  ::google::protobuf::int32 infortunio() const;
  void set_infortunio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tdpalio.Jockey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > capacita_;
  mutable int _capacita_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > score_;
  mutable int _score_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > feelingcontrade_;
  mutable int _feelingcontrade_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::tdpalio::Offer > offerte_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::uint32 indice_;
  ::google::protobuf::uint32 eta_;
  ::google::protobuf::int32 contrada_;
  ::google::protobuf::int32 infortunio_;
  mutable int _cached_size_;
  friend struct ::protobuf_jockeys_2eproto::TableStruct;
  friend void ::protobuf_jockeys_2eproto::InitDefaultsJockeyImpl();
};
// -------------------------------------------------------------------

class Jockeys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tdpalio.Jockeys) */ {
 public:
  Jockeys();
  virtual ~Jockeys();

  Jockeys(const Jockeys& from);

  inline Jockeys& operator=(const Jockeys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jockeys(Jockeys&& from) noexcept
    : Jockeys() {
    *this = ::std::move(from);
  }

  inline Jockeys& operator=(Jockeys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jockeys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jockeys* internal_default_instance() {
    return reinterpret_cast<const Jockeys*>(
               &_Jockeys_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Jockeys* other);
  friend void swap(Jockeys& a, Jockeys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jockeys* New() const PROTOBUF_FINAL { return New(NULL); }

  Jockeys* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Jockeys& from);
  void MergeFrom(const Jockeys& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Jockeys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tdpalio.Jockey fantini = 1;
  int fantini_size() const;
  void clear_fantini();
  static const int kFantiniFieldNumber = 1;
  const ::tdpalio::Jockey& fantini(int index) const;
  ::tdpalio::Jockey* mutable_fantini(int index);
  ::tdpalio::Jockey* add_fantini();
  ::google::protobuf::RepeatedPtrField< ::tdpalio::Jockey >*
      mutable_fantini();
  const ::google::protobuf::RepeatedPtrField< ::tdpalio::Jockey >&
      fantini() const;

  // @@protoc_insertion_point(class_scope:tdpalio.Jockeys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tdpalio::Jockey > fantini_;
  mutable int _cached_size_;
  friend struct ::protobuf_jockeys_2eproto::TableStruct;
  friend void ::protobuf_jockeys_2eproto::InitDefaultsJockeysImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Offer

// int32 da_chi = 1;
inline void Offer::clear_da_chi() {
  da_chi_ = 0;
}
inline ::google::protobuf::int32 Offer::da_chi() const {
  // @@protoc_insertion_point(field_get:tdpalio.Offer.da_chi)
  return da_chi_;
}
inline void Offer::set_da_chi(::google::protobuf::int32 value) {
  
  da_chi_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Offer.da_chi)
}

// int32 contro_chi = 2;
inline void Offer::clear_contro_chi() {
  contro_chi_ = 0;
}
inline ::google::protobuf::int32 Offer::contro_chi() const {
  // @@protoc_insertion_point(field_get:tdpalio.Offer.contro_chi)
  return contro_chi_;
}
inline void Offer::set_contro_chi(::google::protobuf::int32 value) {
  
  contro_chi_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Offer.contro_chi)
}

// int32 a_vincere = 3;
inline void Offer::clear_a_vincere() {
  a_vincere_ = 0;
}
inline ::google::protobuf::int32 Offer::a_vincere() const {
  // @@protoc_insertion_point(field_get:tdpalio.Offer.a_vincere)
  return a_vincere_;
}
inline void Offer::set_a_vincere(::google::protobuf::int32 value) {
  
  a_vincere_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Offer.a_vincere)
}

// int32 a_perdere = 4;
inline void Offer::clear_a_perdere() {
  a_perdere_ = 0;
}
inline ::google::protobuf::int32 Offer::a_perdere() const {
  // @@protoc_insertion_point(field_get:tdpalio.Offer.a_perdere)
  return a_perdere_;
}
inline void Offer::set_a_perdere(::google::protobuf::int32 value) {
  
  a_perdere_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Offer.a_perdere)
}

// -------------------------------------------------------------------

// Jockey

// uint32 indice = 1;
inline void Jockey::clear_indice() {
  indice_ = 0u;
}
inline ::google::protobuf::uint32 Jockey::indice() const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.indice)
  return indice_;
}
inline void Jockey::set_indice(::google::protobuf::uint32 value) {
  
  indice_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.indice)
}

// uint32 eta = 2;
inline void Jockey::clear_eta() {
  eta_ = 0u;
}
inline ::google::protobuf::uint32 Jockey::eta() const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.eta)
  return eta_;
}
inline void Jockey::set_eta(::google::protobuf::uint32 value) {
  
  eta_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.eta)
}

// string nome = 3;
inline void Jockey::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jockey::nome() const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.nome)
  return nome_.GetNoArena();
}
inline void Jockey::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.nome)
}
#if LANG_CXX11
inline void Jockey::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tdpalio.Jockey.nome)
}
#endif
inline void Jockey::set_nome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tdpalio.Jockey.nome)
}
inline void Jockey::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tdpalio.Jockey.nome)
}
inline ::std::string* Jockey::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:tdpalio.Jockey.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jockey::release_nome() {
  // @@protoc_insertion_point(field_release:tdpalio.Jockey.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jockey::set_allocated_nome(::std::string* nome) {
  if (nome != NULL) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:tdpalio.Jockey.nome)
}

// repeated uint32 capacita = 4;
inline int Jockey::capacita_size() const {
  return capacita_.size();
}
inline void Jockey::clear_capacita() {
  capacita_.Clear();
}
inline ::google::protobuf::uint32 Jockey::capacita(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.capacita)
  return capacita_.Get(index);
}
inline void Jockey::set_capacita(int index, ::google::protobuf::uint32 value) {
  capacita_.Set(index, value);
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.capacita)
}
inline void Jockey::add_capacita(::google::protobuf::uint32 value) {
  capacita_.Add(value);
  // @@protoc_insertion_point(field_add:tdpalio.Jockey.capacita)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Jockey::capacita() const {
  // @@protoc_insertion_point(field_list:tdpalio.Jockey.capacita)
  return capacita_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Jockey::mutable_capacita() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.Jockey.capacita)
  return &capacita_;
}

// repeated uint32 score = 5;
inline int Jockey::score_size() const {
  return score_.size();
}
inline void Jockey::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::uint32 Jockey::score(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.score)
  return score_.Get(index);
}
inline void Jockey::set_score(int index, ::google::protobuf::uint32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.score)
}
inline void Jockey::add_score(::google::protobuf::uint32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:tdpalio.Jockey.score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Jockey::score() const {
  // @@protoc_insertion_point(field_list:tdpalio.Jockey.score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Jockey::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.Jockey.score)
  return &score_;
}

// repeated uint32 feelingContrade = 6;
inline int Jockey::feelingcontrade_size() const {
  return feelingcontrade_.size();
}
inline void Jockey::clear_feelingcontrade() {
  feelingcontrade_.Clear();
}
inline ::google::protobuf::uint32 Jockey::feelingcontrade(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.feelingContrade)
  return feelingcontrade_.Get(index);
}
inline void Jockey::set_feelingcontrade(int index, ::google::protobuf::uint32 value) {
  feelingcontrade_.Set(index, value);
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.feelingContrade)
}
inline void Jockey::add_feelingcontrade(::google::protobuf::uint32 value) {
  feelingcontrade_.Add(value);
  // @@protoc_insertion_point(field_add:tdpalio.Jockey.feelingContrade)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Jockey::feelingcontrade() const {
  // @@protoc_insertion_point(field_list:tdpalio.Jockey.feelingContrade)
  return feelingcontrade_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Jockey::mutable_feelingcontrade() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.Jockey.feelingContrade)
  return &feelingcontrade_;
}

// int32 contrada = 7;
inline void Jockey::clear_contrada() {
  contrada_ = 0;
}
inline ::google::protobuf::int32 Jockey::contrada() const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.contrada)
  return contrada_;
}
inline void Jockey::set_contrada(::google::protobuf::int32 value) {
  
  contrada_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.contrada)
}

// int32 infortunio = 8;
inline void Jockey::clear_infortunio() {
  infortunio_ = 0;
}
inline ::google::protobuf::int32 Jockey::infortunio() const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.infortunio)
  return infortunio_;
}
inline void Jockey::set_infortunio(::google::protobuf::int32 value) {
  
  infortunio_ = value;
  // @@protoc_insertion_point(field_set:tdpalio.Jockey.infortunio)
}

// repeated .tdpalio.Offer offerte = 9;
inline int Jockey::offerte_size() const {
  return offerte_.size();
}
inline void Jockey::clear_offerte() {
  offerte_.Clear();
}
inline const ::tdpalio::Offer& Jockey::offerte(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockey.offerte)
  return offerte_.Get(index);
}
inline ::tdpalio::Offer* Jockey::mutable_offerte(int index) {
  // @@protoc_insertion_point(field_mutable:tdpalio.Jockey.offerte)
  return offerte_.Mutable(index);
}
inline ::tdpalio::Offer* Jockey::add_offerte() {
  // @@protoc_insertion_point(field_add:tdpalio.Jockey.offerte)
  return offerte_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tdpalio::Offer >*
Jockey::mutable_offerte() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.Jockey.offerte)
  return &offerte_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tdpalio::Offer >&
Jockey::offerte() const {
  // @@protoc_insertion_point(field_list:tdpalio.Jockey.offerte)
  return offerte_;
}

// -------------------------------------------------------------------

// Jockeys

// repeated .tdpalio.Jockey fantini = 1;
inline int Jockeys::fantini_size() const {
  return fantini_.size();
}
inline void Jockeys::clear_fantini() {
  fantini_.Clear();
}
inline const ::tdpalio::Jockey& Jockeys::fantini(int index) const {
  // @@protoc_insertion_point(field_get:tdpalio.Jockeys.fantini)
  return fantini_.Get(index);
}
inline ::tdpalio::Jockey* Jockeys::mutable_fantini(int index) {
  // @@protoc_insertion_point(field_mutable:tdpalio.Jockeys.fantini)
  return fantini_.Mutable(index);
}
inline ::tdpalio::Jockey* Jockeys::add_fantini() {
  // @@protoc_insertion_point(field_add:tdpalio.Jockeys.fantini)
  return fantini_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tdpalio::Jockey >*
Jockeys::mutable_fantini() {
  // @@protoc_insertion_point(field_mutable_list:tdpalio.Jockeys.fantini)
  return &fantini_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tdpalio::Jockey >&
Jockeys::fantini() const {
  // @@protoc_insertion_point(field_list:tdpalio.Jockeys.fantini)
  return fantini_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tdpalio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_jockeys_2eproto__INCLUDED
